class ZCX_HTTP definition
  public
  inheriting from CX_STATIC_CHECK
  create public .

public section.

  interfaces IF_T100_DYN_MSG .
  interfaces IF_T100_MESSAGE .

  aliases DEFAULT_TEXTID
    for IF_T100_MESSAGE~DEFAULT_TEXTID .
  aliases MSGTY
    for IF_T100_DYN_MSG~MSGTY .
  aliases MSGV1
    for IF_T100_DYN_MSG~MSGV1 .
  aliases MSGV2
    for IF_T100_DYN_MSG~MSGV2 .
  aliases MSGV3
    for IF_T100_DYN_MSG~MSGV3 .
  aliases MSGV4
    for IF_T100_DYN_MSG~MSGV4 .
  aliases T100KEY
    for IF_T100_MESSAGE~T100KEY .

  methods CONSTRUCTOR
    importing
      !TEXTID like IF_T100_MESSAGE=>T100KEY optional
      !PREVIOUS like PREVIOUS optional
      !MSGTY type SYMSGTY optional
      !MSGV1 type SYMSGV optional
      !MSGV2 type SYMSGV optional
      !MSGV3 type SYMSGV optional
      !MSGV4 type SYMSGV optional .
  methods GET_MSG
    returning
      value(RT_MSG) type BAPIRET2_TAB .

METHOD get_msg.

  MESSAGE ID me->t100key-msgid TYPE me->msgty NUMBER me->t100key-msgno
  WITH me->msgv1 me->msgv2 me->msgv3 me->msgv4
  INTO DATA(lv_message).

  APPEND VALUE #( type       = me->msgty
                  id         = me->t100key-msgid
                  number     = me->t100key-msgno
                  message_v1 = me->msgv1
                  message_v2 = me->msgv2
                  message_v3 = me->msgv3
                  message_v4 = me->msgv4
                  message    = lv_message ) TO rt_msg.

ENDMETHOD.

************************************************************************

class ZCL_HTTP definition
  public
  create public .

public section.

  class-methods REQUEST
    importing
      !IP_PROTOCOL type STRING default 'https'
      !IP_HOST type STRING
      !IP_ENDPOINT type STRING
      !IP_PROXY_HOST type STRING optional
      !IP_PROXY_PORT type STRING optional
      !IP_METHOD type STRING default IF_HTTP_REQUEST=>CO_REQUEST_METHOD_POST
      !IP_TOKEN type STRING optional
      !IT_FORM type WDY_KEY_VALUE_LIST optional
    returning
      value(RESPONSE) type STRING
    raising
      ZCX_HTTP .
protected section.
private section.
ENDCLASS.



CLASS ZCL_HTTP IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_HTTP=>REQUEST
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_PROTOCOL                    TYPE        STRING (default ='https')
* | [--->] IP_HOST                        TYPE        STRING
* | [--->] IP_ENDPOINT                    TYPE        STRING
* | [--->] IP_PROXY_HOST                  TYPE        STRING(optional)
* | [--->] IP_PROXY_PORT                  TYPE        STRING(optional)
* | [--->] IP_METHOD                      TYPE        STRING (default =IF_HTTP_REQUEST=>CO_REQUEST_METHOD_POST)
* | [--->] IP_TOKEN                       TYPE        STRING(optional)
* | [--->] IT_FORM                        TYPE        WDY_KEY_VALUE_LIST(optional)
* | [<-()] RESPONSE                       TYPE        STRING
* | [!CX!] ZCX_HTTP
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD request.

  DATA: lo_client TYPE REF TO if_http_client,
        lv_exc    TYPE string.

  cl_http_client=>create_by_url(
    EXPORTING
      url                    = ip_protocol && `://` && ip_host && ip_endpoint
      proxy_host             = ip_proxy_host
      proxy_service          = ip_proxy_port
    IMPORTING
      client                 = lo_client
    EXCEPTIONS
      argument_not_found     = 1
      plugin_not_active      = 2
      internal_error         = 3
      pse_not_found          = 4
      pse_not_distrib        = 5
      pse_errors             = 6
      OTHERS                 = 7 ).
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE zcx_http
      MESSAGE ID 'ZPOSAE' TYPE 'E' NUMBER 192 WITH 'create_by_url' '' '' ''.
  ENDIF.

  lo_client->request->set_method( ip_method ).

  IF ip_token IS NOT INITIAL.
    lo_client->request->set_header_field( name  = 'Authorization'
                                          value = `Bearer ` && ip_token ).
  ENDIF.
  lo_client->request->set_header_field( name  = 'User-Agent'
                                        value = 'SAP NetWeaver Application Server (1.0;755)' ).
  lo_client->request->set_header_field( name  = 'Accept'
                                        value = '*/*' ).
  lo_client->request->set_header_field( name  = 'Host'
                                        value = ip_host ).
  lo_client->request->set_header_field( name  = 'Accept-Encoding'
                                        value = 'gzip, deflate, br' ).
  lo_client->request->set_header_field( name  = 'Connection'
                                        value = 'keep-alive' ).
  lo_client->request->set_header_field( name  = 'content-type'
                                        value = 'application/x-www-form-urlencoded' ).

  DATA lv_length TYPE i.
  LOOP AT it_form ASSIGNING FIELD-SYMBOL(<ls_form>).
    lv_length = lv_length + strlen( <ls_form>-key ).
    lv_length = lv_length + strlen( <ls_form>-value ).
    lo_client->request->set_form_field( name  = <ls_form>-key
                                        value = <ls_form>-value ).
  ENDLOOP.
  lv_length = lv_length + lines( it_form ) * 2 - 1.

  lo_client->request->set_header_field( name  = 'Content-Length'
                                        value = condense( CONV string( lv_length ) ) ).

  lo_client->send(
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3
      http_invalid_timeout       = 4
      OTHERS                     = 5 ).
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE zcx_http
      MESSAGE ID 'ZPOSAE' TYPE 'E' NUMBER 192 WITH 'send' '' '' ''.
  ENDIF.

  lo_client->receive(
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3
      OTHERS                     = 4 ).
  IF sy-subrc <> 0.
    DATA lv_code           TYPE sysubrc.
    DATA lv_message        TYPE string.
    DATA lv_message_class  TYPE arbgb.
    DATA lv_message_number TYPE msgnr.
    lo_client->get_last_error(
      IMPORTING
        code           = lv_code
        message        = lv_message
        message_class  = lv_message_class
        message_number = lv_message_number ).
    DATA(ls_msg) = zcl_string=>to_bapiret2( lv_message ).
    RAISE EXCEPTION TYPE zcx_http
      MESSAGE ID 'ZPOSAE' TYPE 'E' NUMBER 000 WITH ls_msg-message_v1 ls_msg-message_v2
      ls_msg-message_v3 ls_msg-message_v4.
  ENDIF.

*  DATA(lv_xstring) = lo_client->response->get_data( ).
  response = lo_client->response->get_cdata( ).

  lo_client->close( ).

ENDMETHOD.
ENDCLASS.

**********************************************************************************************

FUNCTION z_cdc_get_token.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  EXPORTING
*"     REFERENCE(TOKEN) TYPE  STRING
*"     REFERENCE(ET_RETURN) TYPE  BAPIRET2_TAB
*"----------------------------------------------------------------------

  DATA: lv_apikey  TYPE string,
        lv_userkey TYPE string,
        lv_secret  TYPE string.

  SELECT SINGLE low FROM tvarvc INTO lv_apikey  WHERE name = 'Z_CDC_APIKEY'.
  SELECT SINGLE low FROM tvarvc INTO lv_userkey WHERE name = 'Z_CDC_USERKEY'.
  SELECT SINGLE low FROM tvarvc INTO lv_secret  WHERE name = 'Z_CDC_SECRET'.

  TRY.
      DATA(lv_response) = zcl_http=>request( ip_host       = 'socialize.eu1.gigya.com'
                                             ip_endpoint   = '/socialize.getToken'
                                             ip_proxy_host = c_proxy_host
                                             ip_proxy_port = c_proxy_port
                                             it_form       = VALUE #( ( key = 'grant_type' value = 'none' )
                                                                      ( key = 'client_id'  value = lv_apikey )
                                                                      ( key = 'userKey'    value = lv_userkey )
                                                                      ( key = 'secret'     value = lv_secret ) ) ).
    CATCH zcx_http INTO DATA(lr_http_error).
      et_return = lr_http_error->get_msg( ).
      RETURN.
  ENDTRY.

  DATA(lr_response) = /ui2/cl_json=>generate( json = lv_response ).
  /ui2/cl_data_access=>create( ir_data = lr_response iv_component = `ACCESS_TOKEN`)->value( IMPORTING ev_data = token ).
  IF token IS INITIAL.
    DATA lv_msg TYPE string.
    /ui2/cl_data_access=>create( ir_data = lr_response iv_component = `ERRORDETAILS`)->value( IMPORTING ev_data = lv_msg ).
    DATA(ls_bapiret2) = zcl_string=>to_bapiret2( lv_msg ).
    APPEND ls_bapiret2 TO et_return.
  ENDIF.

ENDFUNCTION.

*******************************************************************************************************************

FUNCTION z_cdc_get_user .
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(IV_EMAIL) TYPE  STRING OPTIONAL
*"     REFERENCE(IV_PHONE) TYPE  STRING OPTIONAL
*"  EXPORTING
*"     REFERENCE(ES_USER) TYPE  ZCDC_USER
*"     REFERENCE(ET_RETURN) TYPE  BAPIRET2_TAB
*"----------------------------------------------------------------------

  DATA: lv_token TYPE string,
        lt_form  TYPE wdy_key_value_list.

  CALL FUNCTION 'Z_CDC_GET_TOKEN'
    IMPORTING
      token     = lv_token
      et_return = et_return.
  IF line_exists( et_return[ type = 'E' ] ).
    RETURN.
  ENDIF.

  DO 2 TIMES.

    CASE sy-index.
      WHEN 1.
        IF iv_email IS NOT INITIAL.
          lt_form = VALUE #( ( key = 'query' value = `SELECT * FROM emailAccounts WHERE profile.email="` && iv_email && `"` ) ).
        ELSE.
          lt_form = VALUE #( ( key = 'query' value = `SELECT * FROM emailAccounts WHERE phoneNumber="` && iv_phone && `"` ) ).
        ENDIF.
      WHEN 2.
        IF iv_email IS NOT INITIAL.
          lt_form = VALUE #( ( key = 'query' value = `SELECT * FROM accounts WHERE profile.email="` && iv_email && `"` ) ).
        ELSE.
          lt_form = VALUE #( ( key = 'query' value = `SELECT * FROM accounts WHERE phoneNumber="` && iv_phone && `"` ) ).
        ENDIF.
    ENDCASE.
    TRY.
        DATA(lv_response) = zcl_http=>request( ip_host       = 'accounts.eu1.gigya.com'
                                               ip_endpoint   = '/accounts.search'
                                               ip_proxy_host = c_proxy_host
                                               ip_proxy_port = c_proxy_port
                                               ip_token      = lv_token
                                               it_form       = lt_form ).
      CATCH zcx_http INTO DATA(lr_http_error).
        et_return = lr_http_error->get_msg( ).
        RETURN.
    ENDTRY.

    DATA(lr_response) = /ui2/cl_json=>generate( json = lv_response ).
    /ui2/cl_data_access=>create( ir_data = lr_response iv_component = `RESULTS[1]-UID`)->value( IMPORTING ev_data = es_user-uid ).
    IF es_user-uid IS INITIAL.
      DATA lv_msg TYPE string.
      /ui2/cl_data_access=>create( ir_data = lr_response iv_component = `ERRORDETAILS`)->value( IMPORTING ev_data = lv_msg ).
      DATA(ls_bapiret2) = zcl_string=>to_bapiret2( lv_msg ).
      APPEND ls_bapiret2 TO et_return.
      RETURN.
    ELSE.
      EXIT.
    ENDIF.

  ENDDO.

  /ui2/cl_data_access=>create( ir_data = lr_response
                               iv_component = `RESULTS[1]-PREFERENCES-COLLECTINGDATA-ISCONSENTGRANTED`
                               )->value( IMPORTING ev_data = es_user-collecting_data ).
  /ui2/cl_data_access=>create( ir_data = lr_response
                               iv_component = `RESULTS[1]-PREFERENCES-COLLECTINGMARKETINGDATA-ISCONSENTGRANTED`
                               )->value( IMPORTING ev_data = es_user-collecting_marketing_data ).
  /ui2/cl_data_access=>create( ir_data = lr_response
                               iv_component = `RESULTS[1]-PREFERENCES-COLLECTINGSTATISTICSDATA-ISCONSENTGRANTED`
                               )->value( IMPORTING ev_data = es_user-collecting_statistics_data ).
  /ui2/cl_data_access=>create( ir_data = lr_response
                               iv_component = `RESULTS[1]-PREFERENCES-NOTIFICATIONSFROMCALLCENTER-ISCONSENTGRANTED`
                               )->value( IMPORTING ev_data = es_user-notifications_from_call_center ).
  /ui2/cl_data_access=>create( ir_data = lr_response
                               iv_component = `RESULTS[1]-PREFERENCES-NOTIFICATIONSVIASMS-ISCONSENTGRANTED`
                               )->value( IMPORTING ev_data = es_user-notifications_via_sms ).
  /ui2/cl_data_access=>create( ir_data = lr_response
                               iv_component = `RESULTS[1]-PREFERENCES-NOTIFICATIONSVIAWHATSAPPANDVIB-ISCONSENTGRANTED`
                               )->value( IMPORTING ev_data = es_user-notifications_via_whatsapp ).
  /ui2/cl_data_access=>create( ir_data = lr_response
                               iv_component = `RESULTS[1]-PREFERENCES-PERMANENTDATA-ISCONSENTGRANTED`
                               )->value( IMPORTING ev_data = es_user-permanent_data ).
  /ui2/cl_data_access=>create( ir_data = lr_response
                               iv_component = `RESULTS[1]-PREFERENCES-PRIVACY-PRIVACYPOLICY-ISCONSENTGRANTED`
                               )->value( IMPORTING ev_data = es_user-privacy_policy ).
  /ui2/cl_data_access=>create( ir_data = lr_response
                               iv_component = `RESULTS[1]-PREFERENCES-THMONELOYALTY-ISCONSENTGRANTED`
                               )->value( IMPORTING ev_data = es_user-thm_one_loyalty ).

ENDFUNCTION.

**************************************************************************************************************************

FUNCTION z_cdc_set_account_info.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(IS_ACCOUNT) TYPE  ZCDC_ACCOUNT
*"  EXPORTING
*"     REFERENCE(EV_UID) TYPE  STRING
*"     REFERENCE(ET_RETURN) TYPE  BAPIRET2_TAB
*"----------------------------------------------------------------------

  DATA: lv_token       TYPE string,
        lv_endpoint    TYPE string,
        lt_form        TYPE wdy_key_value_list,
        lv_token_field TYPE string.
  CALL FUNCTION 'Z_CDC_GET_TOKEN'
    IMPORTING
      token     = lv_token
      et_return = et_return.
  IF line_exists( et_return[ type = 'E' ] ).
    RETURN.
  ENDIF.

  CASE is_account-new_account.
    WHEN abap_true.
      lv_endpoint = '/accounts.initRegistration'.
      lt_form = VALUE #( ( key = 'isLite' value = `true` ) ).
      lv_token_field = 'REGTOKEN'.
    WHEN abap_false.
      lv_endpoint = '/accounts.getLiteToken'.
      lt_form = VALUE #( ( key = 'email' value = is_account-email ) ).
      lv_token_field = 'TOKEN'.
  ENDCASE.

  TRY.
      DATA(lv_response) = zcl_http=>request( ip_host       = 'accounts.eu1.gigya.com'
                                             ip_endpoint   = lv_endpoint
                                             ip_proxy_host = c_proxy_host
                                             ip_proxy_port = c_proxy_port
                                             ip_token      = lv_token
                                             it_form       = lt_form ).
    CATCH zcx_http INTO DATA(lr_http_error).
      et_return = lr_http_error->get_msg( ).
      RETURN.
  ENDTRY.

  DATA(lr_response) = /ui2/cl_json=>generate( json = lv_response ).
  DATA lv_regtoken TYPE string.
  /ui2/cl_data_access=>create( ir_data = lr_response iv_component = lv_token_field )->value( IMPORTING ev_data = lv_regtoken ).
  IF lv_regtoken IS INITIAL.
    DATA lv_msg TYPE string.
    /ui2/cl_data_access=>create( ir_data = lr_response iv_component = `ERRORDETAILS` )->value( IMPORTING ev_data = lv_msg ).
    DATA(ls_bapiret2) = zcl_string=>to_bapiret2( lv_msg ).
    APPEND ls_bapiret2 TO et_return.
    RETURN.
  ENDIF.

  CLEAR lt_form.
  lt_form = VALUE #( ( key = 'regToken' value = lv_regtoken ) ).
  IF is_account-phone IS NOT INITIAL.
    APPEND VALUE #( key = 'phoneNumber' value = is_account-phone ) TO lt_form.
  ENDIF.
  IF is_account-email IS NOT INITIAL.
    APPEND VALUE #( key = 'profile' value = `{ "email": "` && is_account-email && `" }` ) TO lt_form.
  ENDIF.
  TYPES: BEGIN OF collecting_marketing_data,
           is_consent_granted TYPE boolean,
         END OF collecting_marketing_data,
         BEGIN OF notifications_via_sms,
           is_consent_granted TYPE boolean,
         END OF notifications_via_sms,
         BEGIN OF collecting_data,
           is_consent_granted TYPE boolean,
         END OF collecting_data,
         BEGIN OF collecting_statistics_data,
           is_consent_granted TYPE boolean,
         END OF collecting_statistics_data,
         BEGIN OF privacy_policy,
           is_consent_granted TYPE boolean,
         END OF privacy_policy,
         BEGIN OF privacy,
           privacy_policy TYPE privacy_policy,
         END OF privacy,
         BEGIN OF permanent_data,
           is_consent_granted TYPE boolean,
         END OF permanent_data,
         BEGIN OF notifications_via_whatsapp,
           is_consent_granted TYPE boolean,
         END OF notifications_via_whatsapp,
         BEGIN OF notifications_from_call_center,
           is_consent_granted TYPE boolean,
         END OF notifications_from_call_center,
         BEGIN OF thm_one_loyalty,
           is_consent_granted TYPE boolean,
         END OF thm_one_loyalty,
         BEGIN OF preferences,
           collecting_marketing_data      TYPE collecting_marketing_data,
           notifications_via_sms          TYPE notifications_via_sms,
           collecting_data                TYPE collecting_data,
           collecting_statistics_data     TYPE collecting_statistics_data,
           privacy                        TYPE privacy,
           permanent_data                 TYPE permanent_data,
           notifications_via_whatsapp     TYPE notifications_via_whatsapp,
           notifications_from_call_center TYPE notifications_from_call_center,
           thm_one_loyalty                TYPE thm_one_loyalty,
         END OF preferences.
  DATA: ls_preferences TYPE preferences,
        lt_mapping     TYPE /ui2/cl_json=>name_mappings.
  ls_preferences-collecting_marketing_data-is_consent_granted      = is_account-collecting_marketing_data.
  ls_preferences-notifications_via_sms-is_consent_granted          = is_account-notifications_via_sms.
  ls_preferences-collecting_data-is_consent_granted                = is_account-collecting_data.
  ls_preferences-collecting_statistics_data-is_consent_granted     = is_account-collecting_statistics_data.
  ls_preferences-privacy-privacy_policy-is_consent_granted         = is_account-privacy_policy.
  ls_preferences-permanent_data-is_consent_granted                 = is_account-permanent_data.
  ls_preferences-notifications_via_whatsapp-is_consent_granted     = is_account-notifications_via_whatsapp.
  ls_preferences-notifications_from_call_center-is_consent_granted = is_account-notifications_from_call_center.
  ls_preferences-thm_one_loyalty-is_consent_granted                = is_account-thm_one_loyalty.
  lt_mapping = VALUE #( ( abap = `IS_CONSENT_GRANTED`             json = `isConsentGranted` )
                        ( abap = `COLLECTING_MARKETING_DATA`      json = `collectingMarketingData` )
                        ( abap = `NOTIFICATIONS_VIA_SMS`          json = `notificationsViaSMS` )
                        ( abap = `COLLECTING_DATA`                json = `collectingData` )
                        ( abap = `COLLECTING_STATISTICS_DATA`     json = `collectingStatisticsData` )
                        ( abap = `PRIVACY`                        json = `privacy` )
                        ( abap = `PRIVACY_POLICY`                 json = `privacyPolicy` )
                        ( abap = `PERMANENT_DATA`                 json = `permanentData` )
                        ( abap = `NOTIFICATIONS_VIA_WHATSAPP`     json = `notificationsViaWhatsAppAndViber` )
                        ( abap = `NOTIFICATIONS_FROM_CALL_CENTER` json = `notificationsFromCallCenter` )
                        ( abap = `THM_ONE_LOYALTY`                json = `thmOneLoyalty` ) ).
  DATA(lv_preferences) = /ui2/cl_json=>serialize( data = ls_preferences compress = abap_true name_mappings = lt_mapping ).
  APPEND VALUE #( key = 'preferences' value = lv_preferences ) TO lt_form.
  APPEND VALUE #( key = 'lang' value = SWITCH #( sy-langu WHEN 'd' THEN 'sr' ELSE 'en' ) ) TO lt_form.

  TRY.
      lv_response = zcl_http=>request( ip_host       = 'accounts.eu1.gigya.com'
                                       ip_endpoint   = '/accounts.setAccountInfo'
                                       ip_proxy_host = c_proxy_host
                                       ip_proxy_port = c_proxy_port
                                       ip_token      = lv_token
                                       it_form       = lt_form ).
    CATCH zcx_http INTO lr_http_error.
      et_return = lr_http_error->get_msg( ).
      RETURN.
  ENDTRY.

  CLEAR lr_response.
  lr_response = /ui2/cl_json=>generate( json = lv_response ).
  /ui2/cl_data_access=>create( ir_data = lr_response iv_component = `UID` )->value( IMPORTING ev_data = ev_uid ).
  IF ev_uid IS INITIAL.
    /ui2/cl_data_access=>create( ir_data = lr_response iv_component = `ERRORDETAILS` )->value( IMPORTING ev_data = lv_msg ).
    ls_bapiret2 = zcl_string=>to_bapiret2( lv_msg ).
    APPEND ls_bapiret2 TO et_return.
  ENDIF.

ENDFUNCTION.