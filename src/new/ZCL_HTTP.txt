class ZCX_HTTP definition
  public
  inheriting from CX_STATIC_CHECK
  create public .

public section.

  interfaces IF_T100_DYN_MSG .
  interfaces IF_T100_MESSAGE .

  aliases DEFAULT_TEXTID
    for IF_T100_MESSAGE~DEFAULT_TEXTID .
  aliases MSGTY
    for IF_T100_DYN_MSG~MSGTY .
  aliases MSGV1
    for IF_T100_DYN_MSG~MSGV1 .
  aliases MSGV2
    for IF_T100_DYN_MSG~MSGV2 .
  aliases MSGV3
    for IF_T100_DYN_MSG~MSGV3 .
  aliases MSGV4
    for IF_T100_DYN_MSG~MSGV4 .
  aliases T100KEY
    for IF_T100_MESSAGE~T100KEY .

  methods CONSTRUCTOR
    importing
      !TEXTID like IF_T100_MESSAGE=>T100KEY optional
      !PREVIOUS like PREVIOUS optional
      !MSGTY type SYMSGTY optional
      !MSGV1 type SYMSGV optional
      !MSGV2 type SYMSGV optional
      !MSGV3 type SYMSGV optional
      !MSGV4 type SYMSGV optional .
  methods GET_MSG
    returning
      value(RT_MSG) type BAPIRET2_TAB .

METHOD get_msg.

  MESSAGE ID me->t100key-msgid TYPE me->msgty NUMBER me->t100key-msgno
  WITH me->msgv1 me->msgv2 me->msgv3 me->msgv4
  INTO DATA(lv_message).

  APPEND VALUE #( type       = me->msgty
                  id         = me->t100key-msgid
                  number     = me->t100key-msgno
                  message_v1 = me->msgv1
                  message_v2 = me->msgv2
                  message_v3 = me->msgv3
                  message_v4 = me->msgv4
                  message    = lv_message ) TO rt_msg.

ENDMETHOD.

************************************************************************

class ZCL_HTTP definition
  public
  create public .

public section.

  class-methods REQUEST
    importing
      !IP_PROTOCOL type STRING default 'https'
      !IP_HOST type STRING
      !IP_ENDPOINT type STRING
      !IP_PROXY_HOST type STRING optional
      !IP_PROXY_PORT type STRING optional
      !IP_METHOD type STRING default IF_HTTP_REQUEST=>CO_REQUEST_METHOD_POST
      !IT_FORM type WDY_KEY_VALUE_LIST optional
    returning
      value(RESPONSE) type STRING
    raising
      ZCX_HTTP .
protected section.
private section.
ENDCLASS.



CLASS ZCL_HTTP IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_HTTP=>REQUEST
* +-------------------------------------------------------------------------------------------------+
* | [--->] IP_PROTOCOL                    TYPE        STRING (default ='https')
* | [--->] IP_HOST                        TYPE        STRING
* | [--->] IP_ENDPOINT                    TYPE        STRING
* | [--->] IP_PROXY_HOST                  TYPE        STRING(optional)
* | [--->] IP_PROXY_PORT                  TYPE        STRING(optional)
* | [--->] IP_METHOD                      TYPE        STRING (default =IF_HTTP_REQUEST=>CO_REQUEST_METHOD_POST)
* | [--->] IT_FORM                        TYPE        WDY_KEY_VALUE_LIST(optional)
* | [<-()] RESPONSE                       TYPE        STRING
* | [!CX!] ZCX_HTTP
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD request.

  DATA: lo_client TYPE REF TO if_http_client,
        lv_exc    TYPE string.

  cl_http_client=>create_by_url(
    EXPORTING
      url                    = ip_protocol && `://` && ip_host && ip_endpoint
      proxy_host             = ip_proxy_host
      proxy_service          = ip_proxy_port
    IMPORTING
      client                 = lo_client
    EXCEPTIONS
      argument_not_found     = 1
      plugin_not_active      = 2
      internal_error         = 3
      pse_not_found          = 4
      pse_not_distrib        = 5
      pse_errors             = 6
      OTHERS                 = 7 ).
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE zcx_http
      MESSAGE ID 'ZPOSAE' TYPE 'E' NUMBER 192 WITH 'create_by_url' '' '' ''.
  ENDIF.

  lo_client->request->set_method( ip_method ).

  lo_client->request->set_header_field( name  = 'User-Agent'
                                        value = 'SAP NetWeaver Application Server (1.0;755)' ).
  lo_client->request->set_header_field( name  = 'Accept'
                                        value = '*/*' ).
  lo_client->request->set_header_field( name  = 'Host'
                                        value = ip_host ).
  lo_client->request->set_header_field( name  = 'Accept-Encoding'
                                        value = 'gzip, deflate, br' ).
  lo_client->request->set_header_field( name  = 'Connection'
                                        value = 'keep-alive' ).
  lo_client->request->set_header_field( name  = 'content-type'
                                        value = 'application/x-www-form-urlencoded' ).

  DATA lv_length TYPE i.
  LOOP AT it_form ASSIGNING FIELD-SYMBOL(<ls_form>).
    lv_length = lv_length + strlen( <ls_form>-key ).
    lv_length = lv_length + strlen( <ls_form>-value ).
    lo_client->request->set_form_field( name  = <ls_form>-key
                                        value = <ls_form>-value ).
  ENDLOOP.
  lv_length = lv_length + lines( it_form ) * 2 - 1.

  lo_client->request->set_header_field( name  = 'Content-Length'
                                        value = condense( CONV string( lv_length ) ) ).

  lo_client->send(
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3
      http_invalid_timeout       = 4
      OTHERS                     = 5 ).
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE zcx_http
      MESSAGE ID 'ZPOSAE' TYPE 'E' NUMBER 192 WITH 'send' '' '' ''.
  ENDIF.

  lo_client->receive(
    EXCEPTIONS
      http_communication_failure = 1
      http_invalid_state         = 2
      http_processing_failed     = 3
      OTHERS                     = 4 ).
  IF sy-subrc <> 0.
    DATA lv_code           TYPE sysubrc.
    DATA lv_message        TYPE string.
    DATA lv_message_class  TYPE arbgb.
    DATA lv_message_number TYPE msgnr.
    lo_client->get_last_error(
      IMPORTING
        code           = lv_code
        message        = lv_message
        message_class  = lv_message_class
        message_number = lv_message_number ).
    DATA(ls_msg) = zcl_string=>to_bapiret2( lv_message ).
    RAISE EXCEPTION TYPE zcx_http
      MESSAGE ID 'ZPOSAE' TYPE 'E' NUMBER 000 WITH ls_msg-message_v1 ls_msg-message_v2
      ls_msg-message_v3 ls_msg-message_v4.
  ENDIF.

*  DATA(lv_xstring) = lo_client->response->get_data( ).
  response = lo_client->response->get_cdata( ).

  lo_client->close( ).

ENDMETHOD.
ENDCLASS.

**********************************************************************************************

class ZCL_JSON definition
  public
  create public .

public section.

  class-methods GET_STRING
    importing
      !REF type ref to DATA
      !ATTRIB type STRING
    returning
      value(VAL) type STRING .
protected section.
private section.
ENDCLASS.



CLASS ZCL_JSON IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_JSON=>GET_STRING
* +-------------------------------------------------------------------------------------------------+
* | [--->] REF                            TYPE REF TO DATA
* | [--->] ATTRIB                         TYPE        STRING
* | [<-()] VAL                            TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
METHOD get_string.

  DATA lr_val TYPE REF TO data.
  FIELD-SYMBOLS <ls_data> TYPE any.

  IF ref IS BOUND.
    ASSIGN ref->* TO <ls_data>.
    ASSIGN COMPONENT attrib OF STRUCTURE <ls_data> TO FIELD-SYMBOL(<lr_val>).
    IF sy-subrc = 0.
      lr_val = <lr_val>.
      ASSIGN lr_val->* TO FIELD-SYMBOL(<lv_val>).
      val = <lv_val>.
    ENDIF.
  ENDIF.

ENDMETHOD.
ENDCLASS.

*******************************************************************************************************

FUNCTION z_cdc_get_token.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  EXPORTING
*"     REFERENCE(TOKEN) TYPE  STRING
*"     REFERENCE(ET_RETURN) TYPE  BAPIRET2_TAB
*"----------------------------------------------------------------------

  DATA: lv_apikey  TYPE string,
        lv_userkey TYPE string,
        lv_secret  TYPE string.

  SELECT SINGLE low FROM tvarvc INTO lv_apikey  WHERE name = 'Z_CDC_APIKEY'.
  SELECT SINGLE low FROM tvarvc INTO lv_userkey WHERE name = 'Z_CDC_USERKEY'.
  SELECT SINGLE low FROM tvarvc INTO lv_secret  WHERE name = 'Z_CDC_SECRET'.

  TRY.
      DATA(lv_response) = zcl_http=>request( ip_host       = 'socialize.eu1.gigya.com'
                                             ip_endpoint   = '/socialize.getToken'
                                             ip_proxy_host = 'proxy'
                                             ip_proxy_port = '3128'
                                             it_form       = VALUE #( ( key = 'grant_type' value = 'none' )
                                                                      ( key = 'client_id'  value = lv_apikey )
                                                                      ( key = 'userKey'    value = lv_userkey )
                                                                      ( key = 'secret'     value = lv_secret ) ) ).
    CATCH zcx_http INTO DATA(lr_http_error).
      et_return = lr_http_error->get_msg( ).
      RETURN.
  ENDTRY.

  DATA(lr_response) = /ui2/cl_json=>generate( json = lv_response ).
  token = zcl_json=>get_string( ref    =  lr_response
                                attrib = 'ACCESS_TOKEN' ).
  IF token IS INITIAL.
    DATA(lv_msg) = zcl_json=>get_string( ref    =  lr_response
                                         attrib = 'ERRORDETAILS' ).
    DATA(ls_bapiret2) = zcl_string=>to_bapiret2( lv_msg ).
    APPEND ls_bapiret2 TO et_return.
  ENDIF.

ENDFUNCTION.